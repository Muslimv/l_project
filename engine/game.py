import json
import math
import random
from pathlib import Path
from telegram import ReplyKeyboardMarkup

class GameSession:
    active_sessions = {}  # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    @classmethod
    def _load_characters(cls):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ø–∞–ø–∫–∏ characters"""
        characters = []
        for file in Path('data/characters').glob('*.json'):
            with open(file, 'r', encoding='utf-8') as f:
                characters.append(json.load(f))  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–ø–∏—Å–æ–∫
        return characters

    @classmethod
    async def start_game(cls, update, context):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        user_id = update.effective_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cls.active_sessions[user_id] = {
            'remaining_chars': cls._load_characters(),  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            'asked_questions': set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        }
        await cls._ask_question(update, context)  # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å

    @classmethod
    async def _ask_question(cls, update, context):
        """–ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        user_id = update.effective_user.id
        session = cls.active_sessions[user_id]  # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        question = cls._select_best_question(session)  # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–æ–ø—Ä–æ—Å
        session['current_question'] = question['id']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        await update.message.reply_text(
            question['text'],
            reply_markup=ReplyKeyboardMarkup(
                [['–î–∞', '–ù–µ—Ç', '–ù–µ –∑–Ω–∞—é']],  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
                one_time_keyboard=True  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
            )
        )

    @classmethod
    def _select_best_question(cls, session):
        """–í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —ç–Ω—Ç—Ä–æ–ø–∏—é"""
        with open('data/questions.json', 'r', encoding='utf-8') as f:
            questions = json.load(f)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        
        best_q = None
        max_score = -1
        
        for q_id, q_data in questions.items():
            if q_id in session['asked_questions']:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–î–∞" –∏ "–ù–µ—Ç" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            yes = sum(1 for c in session['remaining_chars'] if c['traits'].get(q_id) is True)
            no = len(session['remaining_chars']) - yes
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
            score = cls._calculate_question_score(yes, no)
            
            if score > max_score:  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
                max_score = score
                best_q = {'id': q_id, 'text': q_data['text']}
        
        return best_q or random.choice(list(questions.items()))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π

    @staticmethod
    def _calculate_question_score(yes, no):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞"""
        total = yes + no
        if total == 0: return 0  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
        
        p_yes = yes / total  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å "–î–∞"
        p_no = no / total    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å "–ù–µ—Ç"
        
        # –í—ã—á–∏—Å–ª—è–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é
        entropy = 0
        if p_yes > 0: entropy -= p_yes * math.log2(p_yes)  # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ "–î–∞"
        if p_no > 0: entropy -= p_no * math.log2(p_no)    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ "–ù–µ—Ç"
        
        return entropy  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —ç–Ω—Ç—Ä–æ–ø–∏–∏

    @classmethod
    async def handle_answer(cls, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        session = cls.active_sessions.get(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        if not session:
            await update.message.reply_text("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /play")  # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏–º –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
            return
            
        answer = update.message.text  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        q_id = session['current_question']  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞
        if answer == '–î–∞':
            session['remaining_chars'] = [
                c for c in session['remaining_chars'] 
                if c['traits'].get(q_id) is True
            ]
        elif answer == '–ù–µ—Ç':
            session['remaining_chars'] = [
                c for c in session['remaining_chars'] 
                if c['traits'].get(q_id) is False
            ]
        
        session['asked_questions'].add(q_id)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if len(session['remaining_chars']) == 1:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂
            await cls._send_character(update, session['remaining_chars'][0])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
            del cls.active_sessions[user_id]  # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif not session['remaining_chars']:  # –ï—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            await update.message.reply_text("–Ø —Å–¥–∞—é—Å—å! –ö—Ç–æ —ç—Ç–æ –±—ã–ª? –ù–∞–ø–∏—à–∏—Ç–µ /learn —á—Ç–æ–±—ã –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è")
            del cls.active_sessions[user_id]  # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            await cls._ask_question(update, context)  # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å

    @staticmethod
    async def _send_character(update, character):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        text = f"üéâ –≠—Ç–æ... {character['name']}!\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        text += "\n".join(f"- {k}: {'–î–∞' if v else '–ù–µ—Ç'}" for k,v in character['traits'].items())  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        await update.message.reply_text(text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ