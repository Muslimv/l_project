import json
import math
import random
from pathlib import Path
from telegram import ReplyKeyboardMarkup

class GameSession:
    active_sessions = {}

    @classmethod
    def _load_characters(cls):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ø–∞–ø–∫–∏ characters"""
        characters = []
        for file in Path('data/characters').glob('*.json'):
            with open(file, 'r', encoding='utf-8') as f:
                characters.append(json.load(f))
        return characters

    @classmethod
    async def start_game(cls, update, context):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        user_id = update.effective_user.id
        cls.active_sessions[user_id] = {
            'remaining_chars': cls._load_characters(),
            'asked_questions': set()
        }
        await cls._ask_question(update, context)

    @classmethod
    async def _ask_question(cls, update, context):
        """–ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        user_id = update.effective_user.id
        session = cls.active_sessions[user_id]
        
        question = cls._select_best_question(session)
        session['current_question'] = question['id']
        
        await update.message.reply_text(
            question['text'],
            reply_markup=ReplyKeyboardMarkup(
                [['–î–∞', '–ù–µ—Ç', '–ù–µ –∑–Ω–∞—é']],
                one_time_keyboard=True
            )
        )

    @classmethod
    def _select_best_question(cls, session):
        """–í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —ç–Ω—Ç—Ä–æ–ø–∏—é"""
        with open('data/questions.json', 'r', encoding='utf-8') as f:
            questions = json.load(f)
        
        best_q = None
        max_score = -1
        
        for q_id, q_data in questions.items():
            if q_id in session['asked_questions']:
                continue
                
            yes = sum(1 for c in session['remaining_chars'] if c['traits'].get(q_id) is True)
            no = len(session['remaining_chars']) - yes
            score = cls._calculate_question_score(yes, no)
            
            if score > max_score:
                max_score = score
                best_q = {'id': q_id, 'text': q_data['text']}
        
        return best_q or random.choice(list(questions.items()))

    @staticmethod
    def _calculate_question_score(yes, no):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞"""
        total = yes + no
        if total == 0: return 0
        
        p_yes = yes / total
        p_no = no / total
        
        entropy = 0
        if p_yes > 0: entropy -= p_yes * math.log2(p_yes)
        if p_no > 0: entropy -= p_no * math.log2(p_no)
            
        return entropy

    @classmethod
    async def handle_answer(cls, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        session = cls.active_sessions.get(user_id)
        
        if not session:
            await update.message.reply_text("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /play")
            return
            
        answer = update.message.text
        q_id = session['current_question']
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        if answer == '–î–∞':
            session['remaining_chars'] = [
                c for c in session['remaining_chars'] 
                if c['traits'].get(q_id) is True
            ]
        elif answer == '–ù–µ—Ç':
            session['remaining_chars'] = [
                c for c in session['remaining_chars'] 
                if c['traits'].get(q_id) is False
            ]
            
        session['asked_questions'].add(q_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if len(session['remaining_chars']) == 1:
            await cls._send_character(update, session['remaining_chars'][0])
            del cls.active_sessions[user_id]
        elif not session['remaining_chars']:
            await update.message.reply_text("–Ø —Å–¥–∞—é—Å—å! –ö—Ç–æ —ç—Ç–æ –±—ã–ª? –ù–∞–ø–∏—à–∏—Ç–µ /learn —á—Ç–æ–±—ã –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è")
            del cls.active_sessions[user_id]
        else:
            await cls._ask_question(update, context)

    @staticmethod
    async def _send_character(update, character):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        text = f"üéâ –≠—Ç–æ... {character['name']}!\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        text += "\n".join(f"- {k}: {'–î–∞' if v else '–ù–µ—Ç'}" for k,v in character['traits'].items())
        await update.message.reply_text(text)