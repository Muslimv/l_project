import json
import re
from pathlib import Path
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from typing import Dict, Any


class LearningMode:
    """–í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–æ–≤—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º"""
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è
    # –ö–ª—é—á - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–Ω–∞—á–µ–Ω–∏–µ - –µ–≥–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    learning_sessions: Dict[int, Dict[str, Any]] = {}

    @classmethod
    async def start_learning(cls, update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /learn - –æ–±—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º"""
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å —á–∏—Å—Ç—ã–º –ª–∏—Å—Ç–æ–º
        cls.learning_sessions[user_id] = {
            'state': 'awaiting_name',  # –°–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–æ—Å–∏–º –∏–º—è
            'character': {             # –ó–¥–µ—Å—å –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                'name': '',           # –ö–∞–∫ –∑–æ–≤—É—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                'traits': {},         # –ï–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                'image_path': None    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ—Ç–æ–º
            }
        }

        # –ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        await update.message.reply_text(
            "üîç –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –ö–∞–∫ –µ–≥–æ –∑–æ–≤—É—Ç?",
            reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

    @classmethod
    async def handle_learning(cls, update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ, —á—Ç–æ –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –æ–±—É—á–µ–Ω–∏–µ, –Ω–∞–ø–æ–º–Ω–∏—Ç –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å
        if user_id not in cls.learning_sessions:
            await update.message.reply_text(
                "–•–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è –Ω–æ–≤–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É? –ù–∞–ø–∏—à–∏ /learn",
                reply_markup=ReplyKeyboardRemove()
            )
            return

        session = cls.learning_sessions[user_id]
        state = session['state']  # –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø –æ–±—É—á–µ–Ω–∏—è
        character = session['character']  # –¢–æ, —á—Ç–æ —É–∂–µ —É–∑–Ω–∞–ª–∏

        # –†–∞–∑–±–∏—Ä–∞–µ–º—Å—è, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
        if state == 'awaiting_name':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            await cls._handle_name(update, character)
            session['state'] = 'awaiting_question'  # –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–æ–ø—Ä–æ—Å–∞–º
            
        elif state == 'awaiting_question':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ª–∏–±–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å, –ª–∏–±–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å
            if text.lower() in ['–≥–æ—Ç–æ–≤–æ', '–∑–∞–∫–æ–Ω—á–∏—Ç—å']:
                await cls._finish_learning(update, character)
                del cls.learning_sessions[user_id]  # –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é
            else:
                await cls._handle_new_question(update, session, text)
                
        elif state == 'awaiting_answer':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–î–∞/–ù–µ—Ç)
            await cls._handle_answer(update, session, text)
            session['state'] = 'awaiting_question'  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º

    @staticmethod
    async def _handle_name(update, character_data: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        name = update.message.text.strip()
        
        # –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º - —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        if not re.match(r"^[–ê-–Ø–∞-—èA-Za-z\s]{2,30}$", name):
            await update.message.reply_text(
                "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (2-30 —Å–∏–º–≤–æ–ª–æ–≤)\n"
                "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        character_data['name'] = name
        await update.message.reply_text(
            f"üëå –û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä—Å–æ–Ω–∞–∂ '{name}'!\n\n"
            "–¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "\"–≠—Ç–æ —á–µ–ª–æ–≤–µ–∫?\"\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ \"–ì–æ—Ç–æ–≤–æ\" —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å",
            reply_markup=ReplyKeyboardMarkup([['–ì–æ—Ç–æ–≤–æ']], one_time_keyboard=True)
        )

    @staticmethod
    async def _handle_new_question(update, session_data: Dict[str, Any], question_text: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        question = question_text.strip().rstrip('?')
        
        # –î–µ–ª–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Ç–∞–∫: –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è, –≤ –∫–æ–Ω—Ü–µ –≤–æ–ø—Ä–æ—Å
        question = question[0].upper() + question[1:]
        if not question.endswith('?'):
            question += '?'
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
        session_data['current_question'] = question
        session_data['state'] = 'awaiting_answer'
        
        await update.message.reply_text(
            f"‚ùì –í–æ–ø—Ä–æ—Å: {question}\n"
            "–ö–∞–∫–æ–π –æ—Ç–≤–µ—Ç? (–î–∞/–ù–µ—Ç)",
            reply_markup=ReplyKeyboardMarkup([['–î–∞', '–ù–µ—Ç']], one_time_keyboard=True)
        )

    @staticmethod
    async def _handle_answer(update, session_data: Dict[str, Any], answer: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        question = session_data['current_question']
        character = session_data['character']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ True/False –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        is_yes = answer.lower() in ['–¥–∞', 'yes']
        character['traits'][question] = is_yes
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: {question} ‚Üí {'–î–∞' if is_yes else '–ù–µ—Ç'}\n\n"
            "–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å \"–ì–æ—Ç–æ–≤–æ\"",
            reply_markup=ReplyKeyboardMarkup([['–ì–æ—Ç–æ–≤–æ']], one_time_keyboard=True)
        )

    @staticmethod
    async def _finish_learning(update, character_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∞–∑—É"""
        try:
            # –°–æ–∑–¥–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            filename = f"data/characters/{character_data['name'].lower().replace(' ', '_')}.json"
            
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            Path('data/characters').mkdir(exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(character_data, f, ensure_ascii=False, indent=2)
                
            # –†–∞–¥—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
            await update.message.reply_text(
                f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
                f"–í—Å–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(character_data['traits'])}\n\n"
                "–¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É —É–≥–∞–¥—ã–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!",
                reply_markup=ReplyKeyboardRemove()
            )
            
        except Exception as e:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            await update.message.reply_text(
                f"‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)}\n"
                "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ",
                reply_markup=ReplyKeyboardRemove()
            )