import json
import re
from pathlib import Path
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from typing import Dict, Any

class LearningMode:
    """–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –Ω–æ–≤—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º"""
    
    # –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    learning_sessions: Dict[int, Dict[str, Any]] = {}

    @classmethod
    async def start_learning(cls, update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É"""
        user_id = update.effective_user.id
        
        cls.learning_sessions[user_id] = {
            'state': 'awaiting_name',
            'character': {
                'name': '',
                'traits': {},
                'image_path': None
            }
        }

        await update.message.reply_text(
            "üîç –î–∞–≤–∞–π—Ç–µ –Ω–∞—É—á–∏–º –º–µ–Ω—è –Ω–æ–≤–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É!\n"
            "–ö–∞–∫ –µ–≥–æ –∑–æ–≤—É—Ç?",
            reply_markup=ReplyKeyboardRemove()
        )

    @classmethod
    async def handle_learning(cls, update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –æ–±—É—á–µ–Ω–∏—è
        if user_id not in cls.learning_sessions:
            await update.message.reply_text(
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /learn",
                reply_markup=ReplyKeyboardRemove()
            )
            return

        session = cls.learning_sessions[user_id]
        state = session['state']
        character = session['character']

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É
        if state == 'awaiting_name':
            await cls._handle_name(update, character)
            session['state'] = 'awaiting_question'
            
        elif state == 'awaiting_question':
            if text.lower() in ['–≥–æ—Ç–æ–≤–æ', '–∑–∞–∫–æ–Ω—á–∏—Ç—å']:
                await cls._finish_learning(update, character)
                del cls.learning_sessions[user_id]
            else:
                await cls._handle_new_question(update, session, text)
                
        elif state == 'awaiting_answer':
            await cls._handle_answer(update, session, text)
            session['state'] = 'awaiting_question'

    @staticmethod
    async def _handle_name(update, character_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        name = update.message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if not re.match(r"^[–ê-–Ø–∞-—èA-Za-z\s]{2,30}$", name):
            await update.message.reply_text(
                "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã (2-30 —Å–∏–º–≤–æ–ª–æ–≤)\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        character_data['name'] = name
        await update.message.reply_text(
            f"üëå –û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä—Å–æ–Ω–∞–∂ '{name}'!\n\n"
            "–¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "\"–≠—Ç–æ —á–µ–ª–æ–≤–µ–∫?\"\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\" —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å",
            reply_markup=ReplyKeyboardMarkup([['–ì–æ—Ç–æ–≤–æ']], one_time_keyboard=True)
        )

    @staticmethod
    async def _handle_new_question(update, session_data: Dict[str, Any], question_text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        question = question_text.strip().rstrip('?')
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
        question = question[0].upper() + question[1:]
        if not question.endswith('?'):
            question += '?'
            
        session_data['current_question'] = question
        session_data['state'] = 'awaiting_answer'
        
        await update.message.reply_text(
            f"‚ùì –í–æ–ø—Ä–æ—Å: {question}\n"
            "–ö–∞–∫–æ–π –æ—Ç–≤–µ—Ç? (–î–∞/–ù–µ—Ç)",
            reply_markup=ReplyKeyboardMarkup([['–î–∞', '–ù–µ—Ç']], one_time_keyboard=True)
        )

    @staticmethod
    async def _handle_answer(update, session_data: Dict[str, Any], answer: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        question = session_data['current_question']
        character = session_data['character']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ boolean
        is_yes = answer.lower() in ['–¥–∞', 'yes']
        character['traits'][question] = is_yes
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: {question} ‚Üí {'–î–∞' if is_yes else '–ù–µ—Ç'}\n\n"
            "–ó–∞–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\"",
            reply_markup=ReplyKeyboardMarkup([['–ì–æ—Ç–æ–≤–æ']], one_time_keyboard=True)
        )

    @staticmethod
    async def _finish_learning(update, character_data: Dict[str, Any]):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
            filename = f"data/characters/{character_data['name'].lower().replace(' ', '_')}.json"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            Path('data/characters').mkdir(exist_ok=True)
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(character_data, f, ensure_ascii=False, indent=2)
                
            await update.message.reply_text(
                f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
                f"–í—Å–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(character_data['traits'])}\n\n"
                "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É —Å /play",
                reply_markup=ReplyKeyboardRemove()
            )
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ",
                reply_markup=ReplyKeyboardRemove()
            )